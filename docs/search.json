{"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV10statusCodeSivp":{"name":"statusCode","abstract":"<p>Status code expected in the response - defaults to 200</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV4data10Foundation4DataVSgvp":{"name":"data","abstract":"<p>Data expected in the response</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV5delaySdvp":{"name":"delay","abstract":"<p>Delay applied before the response is returned</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV7headersSDyS2SGSgvp":{"name":"headers","abstract":"<p>Headers expected in the response</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV11httpVersionAC11HTTPVersionOvp":{"name":"httpVersion","abstract":"<p>HTTP version used to init HTTPURLResponse</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV11responseURL10Foundation0G0VSgvp":{"name":"responseURL","abstract":"<p>URL expected in the response</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/ResponseConfiguration.html#/s:18NSNetworkingMocker010NetworkingB0C21ResponseConfigurationV011expectsDataD0Sbvp":{"name":"expectsDataResponse","abstract":"<p>Set to false if data needs to equal nil - defaults to true</p>","parent_name":"ResponseConfiguration"},"Classes/NetworkingMocker/HTTPVersion.html#/s:18NSNetworkingMocker010NetworkingB0C11HTTPVersionO7http1_0yA2EmF":{"name":"http1_0","abstract":"<p>Undocumented</p>","parent_name":"HTTPVersion"},"Classes/NetworkingMocker/HTTPVersion.html#/s:18NSNetworkingMocker010NetworkingB0C11HTTPVersionO7http1_1yA2EmF":{"name":"http1_1","abstract":"<p>Undocumented</p>","parent_name":"HTTPVersion"},"Classes/NetworkingMocker/HTTPVersion.html#/s:18NSNetworkingMocker010NetworkingB0C11HTTPVersionO7http2_0yA2EmF":{"name":"http2_0","abstract":"<p>Undocumented</p>","parent_name":"HTTPVersion"},"Classes/NetworkingMocker/HTTPVersion.html":{"name":"HTTPVersion","abstract":"<p>Enum used to supply the http version for the ResponseConfiguration</p>","parent_name":"NetworkingMocker"},"Classes/NetworkingMocker/ResponseConfiguration.html":{"name":"ResponseConfiguration","abstract":"<p>Configuration object for the response returned by MockURLProtocol</p>","parent_name":"NetworkingMocker"},"Classes/NetworkingMocker.html#/s:18NSNetworkingMocker010NetworkingB0C5mocksSDy10Foundation3URLVAC21ResponseConfigurationVGvpZ":{"name":"mocks","abstract":"<p>Storage for mocks - They key is the URL given to the URLRequest or URLSessionDataTask</p>","parent_name":"NetworkingMocker"},"Classes/NetworkingMocker.html#/s:18NSNetworkingMocker010NetworkingB0C10clearMocksyyFZ":{"name":"clearMocks()","abstract":"<p>Clears the mocks dictionary</p>","parent_name":"NetworkingMocker"},"Classes/NetworkingMocker.html#/s:18NSNetworkingMocker010NetworkingB0C20addMockConfiguration_3foryAC08ResponseF0V_10Foundation3URLVtFZ":{"name":"addMockConfiguration(_:for:)","abstract":"<p>Adds a mock to the mocks dictionary using the url as the key</p>","parent_name":"NetworkingMocker"},"Classes/NetworkingMocker.html#/s:18NSNetworkingMocker010NetworkingB0C20getMockConfiguration3forAC08ResponseF0VSg10Foundation3URLV_tFZ":{"name":"getMockConfiguration(for:)","abstract":"<p>Returns the mock for the url provided. Returns nil if no key matches.</p>","parent_name":"NetworkingMocker"},"Classes/MockURLProtocol/MockURLProtocolError.html#/s:18NSNetworkingMocker15MockURLProtocolC0cD5ErrorO20missingConfigurationyAESS_tcAEmF":{"name":"missingConfiguration(url:)","abstract":"<p>Either no mock exists for the url in the request, or a HTTPURLResponse can&rsquo;t be constructed with the data provided</p>","parent_name":"MockURLProtocolError"},"Classes/MockURLProtocol/MockURLProtocolError.html#/s:18NSNetworkingMocker15MockURLProtocolC0cD5ErrorO26noDataProvidedWhenExpectedyAESS_tcAEmF":{"name":"noDataProvidedWhenExpected(url:)","abstract":"<p>Returned when the mock&rsquo;s data property is nil and the mock asserts there should be data returned in the response</p>","parent_name":"MockURLProtocolError"},"Classes/MockURLProtocol/MockURLProtocolError.html":{"name":"MockURLProtocolError","abstract":"<p>Errors that can be returned in the response via startLoading()</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/s:18NSNetworkingMocker15MockURLProtocolC9canHandle3urlSb10Foundation3URLV_tFZ":{"name":"canHandle(url:)","abstract":"<p>If the request URL doesn&rsquo;t exist as a key in the mocks dictionary, then MockURLProtocol won&rsquo;t assert that it can handle the request</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(cm)canInitWithTask:":{"name":"canInit(with:)","abstract":"<p>Will return true if canHandle(url:) returns true. Returns false if the task has no url.</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(cm)canInitWithRequest:":{"name":"canInit(with:)","abstract":"<p>Will return true if canHandle(url:) returns true. Returns false if the request has no url.</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(cm)canonicalRequestForRequest:":{"name":"canonicalRequest(for:)","abstract":"<p>Returns the request unmodified.</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(cm)requestIsCacheEquivalent:toRequest:":{"name":"requestIsCacheEquivalent(_:to:)","abstract":"<p>Always returns false</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(im)startLoading":{"name":"startLoading()","abstract":"<p>This method retrieves a mock and returns a response based on the configruation it contains.</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html#/c:@M@NSNetworkingMocker@objc(cs)MockURLProtocol(im)stopLoading":{"name":"stopLoading()","abstract":"<p>This method does nothing as we aren&rsquo;t initiating any network requests</p>","parent_name":"MockURLProtocol"},"Classes/MockURLProtocol.html":{"name":"MockURLProtocol","abstract":"<p>Subclass of URLProtocol used to intercept requests</p>"},"Classes/NetworkingMocker.html":{"name":"NetworkingMocker","abstract":"<p>NetworkingMocker provides a way of storing and retrieving mock reponse objects for both MockURLProtocol and your code</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"}}